
                            CSS4J RELEASE NOTES
                            ===================

Release 3.4.0 - February 28, 2021
---------------------------------

Release Highlights
------------------
* Support for lab() and lch() color functions.

  The lab() and lch() functions are finally landing in Webkit, and the other
  major browsers have shown interest in implementing them (although it may still
  take some time).

  The usage of these functions in a toolchain with the typical Java open source
  tools (which tend to use the sRGB default color space) could be problematic,
  as lab() and lch() are often specified out of that gamut, but an accurate RGB
  clamping method is provided.


* Customizable serialization of computed styles.

  Now you can control the serialization of computed styles thanks to a new
  factory method:
    StyleFormattingFactory.createComputedStyleFormattingContext(),
  which returns a DeclarationFormattingContext.

  A non-default implementation of that interface, called
  RGBStyleFormattingFactory, is provided for the convenience of users that can
  only deal with rgb colors in computed styles (for example those feeding CSS4J
  computed styles into Apache FOP). Basically, it allows to use CSS with Lab,
  LCh or Hsl colors and then convert them to RGB at the computed-style stage.


* CSSOM: make the old rgb(a) color functional serialization with commas the
  default for color conversions to RGB.

  When parsing, the library uses the same RGB format that was specified. That
  is, if the input was a rgba() function with commas, it serialized that way.
  However, when other types of colors were converted to RGB, it defaulted to the
  modern format without the commas. That default was not the most adequate
  though:

    1) According to the 2020 Web Almanac, "99.89% of functionally specified sRGB
       colors are using the since-forever legacy format with commas [...] rather
       than the new comma-less form".

    2) XSL:FO uses the old format with commas, see
       https://www.w3.org/TR/xsl/#expr-color-functions


* Added method match(CSSValueSyntax) to both LexicalUnit and CSSValue.

  This allows checking the grammar of values against specific syntaxes like
  <length>+, <string>#, <transform-function> or <unicode-range>#.


* Support registered custom properties (including @property rules) from CSS
  Properties and Values API Level 1.

  The rule (that currently only works in Chrome/Blink) allows to customize the
  behaviour of custom properties.


* DOM: add the DOMNode.removeAllChild() convenience method.

  AFAIK no other DOM implementation contains this useful method.


Description
-----------
 This software contains Java(tm) classes covering CSS document style formatting.
Unless otherwise noted, this software is provided under a BSD-style licence
(see the LICENSE.txt file, and also LICENSES.txt for included files that have a
different licensing).

 The functionality in this library can be divided in the following areas:

- A CSSOM API very similar to the standard W3C CSS Object Model API, that allows
  accessing the CSS information (style sheets, inline styles, etc.) in a DOM
  Document, as well as getting computed styles for its elements.
- A CSS-enabled native DOM implementation.
- A DOM wrapper that can be used with an external DOM implementation.
- A DOM4J backend (module css4j-dom4j) which uses documents and elements that
  extend those of dom4j (for those who are comfortable with dom4j).
- A device profile API to encapsulate target device-specific information.
- A few AWT helper classes (AWT module).
- Some helper XML-DTD classes.


Packaging
---------
 This project is divided in several modules:

- Core module: file css4j-<version>.jar
- User agent module: file css4j-agent-<version>.jar
- Dom4j backend module: file css4j-dom4j-<version>.jar
- AWT module, with AWT helper classes: file css4j-awt-<version>.jar
- XML-DTD module (for DTD utilities): file xml-dtd-<version>.jar
- Carte-util module: file carte-util-<version>.jar
- Tokenproducer-uparser module: file tokenproducer-<version>.jar

 Depending on your use case, you may need different modules.


Java(tm) Runtime Environment requirements
-----------------------------------------
 All the classes in the binary package have been compiled with a Java compiler
set to 1.8 compiler compliance level, except the module-info files.

 Building the library requires JDK 15 or higher, although the resulting jar
files can be run with a 1.8 JRE.


W3C Compliance
--------------
 Some parts of the code may throw DOMExceptions that are not covered by the 
CSS Object Model specification. Those cases are documented in the code.

 The behaviour of the documents and sheets varies according to the 'compliance
mode' of the associated document (DTD-less documents are in 'quirks' mode).

 If your use case is broken due to non-conformant behaviour, please report.


CSS3 Support
------------
 CSS3 is partially supported by the base CSS interfaces, and is not supported 
by the experimental visual formatting model. The following table summarizes 
the basic support for setting/retrieving the main CSS level 3/4 features (other
specifications are also supported):
  ___________________________________________
 |    CSS Spec Name            |   Support   |
 |-----------------------------|-------------|
 | Background / Border         | Yes         |
 | Color                       | Partial (1) |
 | Media Queries               | Partial (2) |
 | Selectors                   | Yes         |
 | Transitions                 | Yes         |
 | Values                      | Yes         |
 | Properties and Values API   | Yes         |
 | Grid / Template / Alignment | Partial (3) |
 |_____________________________|_____________|
Notes:
 1) Level 3 is supported, level 4 partially.
 2) Event handling with addListener/removeListener is not supported, given that
the library's user is supposed to be in control of the CSSCanvas instances where
the information about such events should be available.
 3) Legacy gap properties (grid-row-gap, grid-column-gap, and grid-gap) are not
supported, although the longhands can be used if declared explicitly).


Using CSS4J
-----------
 The usage guide at the website and the Javadoc overviews of the different
packages can be a starting point for users. Unit tests may also be useful
in showing different uses of the library. Generally, the library will be used in
the context of a document object model tree, but stand-alone use of style
declarations and style sheets is also possible.


Software dependencies
=====================

 To build this library you need:

- The jclf-text module; version 5.0.0 or higher is required. Go to
  https://sourceforge.net/projects/jclf for downloads, or install with the
  release-scripts/install-jclf.sh script.

- The SLF4J package, which is a logging package. See http://www.slf4j.org/ 
  for more information.

To build the dom4j module the following is required:

- The dom4j JAR package (tested with 2.1.3).
  URL: https://github.com/dom4j

- The XPP3 Pull Parser (which is supported by this library but beware that it
  does not support entities). See:
  https://github.com/xmlpull-xpp3/xmlpull-xpp3

 Optional packages:

To run the unit tests you need a recent version of JUnit 4. Tests and the agent
module also require the validator.nu html5 parser:
    https://about.validator.nu/htmlparser/

- Dom4j module: unit tests require Jaxen (https://github.com/jaxen-xpath/jaxen).
  This software was tested with 1.2.0.

 A Maven build (which requires Java 15 or higher) is provided. The dom4j module
requires dom4j 2.x to build, although you should be able to run the resulting
jar file with dom4j 1.6 if you are stuck with it.


Project Sites
=============
Project home: https://css4j.github.io/
Development site: https://github.com/css4j
