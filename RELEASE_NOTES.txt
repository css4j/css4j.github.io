
                            CSS4J RELEASE NOTES
                            ===================

Release 3.0.0 - September 19, 2020
----------------------------------

 Three modules were split out from the css4j module in 2.x: tokenproducer,
carte-util and xml-dtd. This should give more flexibility to developers that
only want one of them (or want to use css4j without xml-dtd).


Upgrading from 2.1
------------------
 Now you can use finer-grained modules, but if you used css4j together with DTD
classes, in Maven you now need to specify the xml-dtd module separately, like:

    <dependency>
		<groupId>io.sf.carte</groupId>
		<artifactId>xml-dtd</artifactId>
		<version>${css4j.version}</version>
		<type>jar</type>
		<scope>compile</scope>
		<optional>false</optional>
    </dependency>
    <dependency>
		<groupId>io.sf.carte</groupId>
		<artifactId>css4j</artifactId>
		<version>${css4j.version}</version>
		<type>jar</type>
		<scope>compile</scope>
		<optional>false</optional>
    </dependency>

 Then, there are the following API changes that you may need to address:

- CSSOM: moved CSSCanvas, Viewport from 'agent' to 'style.css' package. The old
  interfaces can still be used (they inherit from the new), but are deprecated.
- Moved BooleanCondition, BooleanConditionFactory, MediaFeaturePredicate,
  MediaQueryFactory and MediaQueryHandler from 'parser' to 'style.css' package.
  The reason: 'parser' is supposed to be mostly an implementation package, and
  this move would allow other implementations to exist.
- DOM API: introduced interface 'StringList' and two implementations of it.
- CSSOM: StringList is now used in comment processing instead of List<String>,
  and enablePrecedingComments() was added to AbstractCSSRule.
- CSSOM: removed the clone(AbstractCSSStyleSheet) method from CSSRule interface.
  Use AbstractCSSRule.clone(AbstractCSSStyleSheet) instead.
- CSSOM: method SACErrorHandler.mapError() now takes a CSSRule instead of an
  AbstractCSSRule (to make it more generic and allow other implementations).


Description
-----------
 This software contains Java(tm) classes covering CSS document style formatting.
Unless otherwise noted, this software is provided under a BSD-style licence
(see the LICENSE.txt file, and also LICENSES.txt for included files that have a
different licensing).

 The functionality in this library can be divided in the following areas:

- A CSSOM API very similar to the standard W3C CSS Object Model API, that allows
  accessing the CSS information (style sheets, inline styles, etc.) in a DOM
  Document, as well as getting computed styles for its elements.
- A CSS-enabled native DOM implementation.
- A DOM wrapper that can be used with an external DOM implementation.
- A DOM4J backend (module css4j-dom4j) which uses documents and elements that
  extend those of dom4j (for those who are comfortable with dom4j).
- A device profile API to encapsulate target device-specific information.
- A few AWT helper classes (AWT module).
- Some helper XML-DTD classes.


Packaging
---------
 This project is divided in several modules:

- Core module: file css4j-<version>.jar
- User agent module: file css4j-agent-<version>.jar
- Dom4j backend module: file css4j-dom4j-<version>.jar
- AWT module, with AWT helper classes: file css4j-awt-<version>.jar
- XML-DTD module (for DTD utilities): file xml-dtd-<version>.jar
- Carte-util module: file carte-util-<version>.jar
- Tokenproducer-uparser module: file tokenproducer-<version>.jar

 Depending on your use case, you may need different modules.


Java(tm) Runtime Environment requirements
-----------------------------------------
 All the classes in the binary package have been compiled with a Java SE 
compiler set to 1.8 compiler compliance level, except the module-info files.

 Building the library requires JDK 12 or higher, although the resulting jar
files can be run with a 1.8 JRE.


W3C Compliance
--------------
 Some parts of the code may throw DOMExceptions that are not covered by the 
CSS Object Model specification. Those cases are documented in the code.

 The behaviour of the documents and sheets varies according to the 'compliance
mode' of the associated document (DTD-less documents are in 'quirks' mode).

 If your use case is broken due to non-conformant behaviour, please report.


CSS3 Support
------------
 CSS3 is partially supported by the base CSS interfaces, and is not supported 
by the experimental visual formatting model. The following table summarizes 
the basic support for setting/retrieving the main CSS level 3/4 features (other
specifications are also supported):
  ___________________________________________
 |    CSS3 Spec Name           |   Support   |
 |-----------------------------|-------------|
 | Background / Border         | Yes         |
 | Color                       | Yes         |
 | Media Queries               | Partial (1) |
 | Selectors                   | Yes         |
 | Transitions                 | Yes         |
 | Values                      | Yes         |
 | Grid / Template / Alignment | Partial (2) |
 |_____________________________|_____________|
Notes:
 1) Event handling with addListener/removeListener is not supported, given that
the library's user is supposed to be in control of the CSSCanvas instances where
the information about such events should be available.
 2) Legacy gap properties (grid-row-gap, grid-column-gap, and grid-gap) are not
supported, although the longhands can be used if declared explicitly).


Using CSS4J
-----------
 The usage guide at the website and the Javadoc overviews of the different
packages can be a starting point for users. Unit tests may also be useful
in showing different uses of the library. Generally, the library will be used in
the context of a document object model tree, but stand-alone use of style
declarations and style sheets is also possible.


Software dependencies
=====================

 To build this library you need:

- The JCLF package. Version 4.0.4 or higher is required. Go to
  https://sourceforge.net/projects/jclf for downloads.

- The SLF4J package, which is a logging package. See http://www.slf4j.org/ 
  for more information.

To build the dom4j module the following is required:

- The dom4j JAR package (tested with 2.1.1).
  URL: https://github.com/dom4j

- The XPP3 Pull Parser (which is supported by this library but beware that it
  does not support entities). See:
  http://www.extreme.indiana.edu/dist/java-repository/xpp3/distributions/

 Optional packages:

To run the unit tests you need a recent version of JUnit 4. Tests and the agent
module also require the validator.nu html5 parser:
    https://about.validator.nu/htmlparser/

- Dom4j module: unit tests require Jaxen (https://github.com/jaxen-xpath/jaxen).
  This software was tested with 1.2.0.

 A Maven build (which requires Java 12 or higher) is provided. The dom4j module
requires dom4j 2.x to build, although you should be able to run the resulting
jar file with dom4j 1.6 if you are stuck with it.


Project Sites
=============
Project home: https://css4j.github.io/
Development site: https://github.com/css4j
